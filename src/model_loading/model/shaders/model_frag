#version 400 core


in vec3 fragment_position;
in vec3 normal;
in vec2 texture_coordinates; 

out vec4 frag_color;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float theta_min;
    float theta_taper_start;
};

struct DirectionalLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    vec3 ambient;
    vec3 specular;
    vec3 diffuse;
    float constant;
    float linear;
    float quadratic;
};

uniform Material material;
uniform vec3 camera_position;
uniform DirectionalLight directional_light;
uniform PointLight point_lights[4];
uniform SpotLight spotlight;


vec3 calc_directional_light(DirectionalLight light, vec3 normal,
                            vec3 view_direction)
{
    // These are position independent lights - eg. the sun.
    vec3 light_direction = normalize(-light.direction);
    float diff = max(dot(normal, light_direction), 0.0);
    vec3 reflect_direction = reflect(-light_direction, normal);
    float spec = pow(max(dot(view_direction, reflect_direction), 0.0),
                     material.shininess);
    vec3 ambient = light.ambient * vec3(texture(material.diffuse,
                                                texture_coordinates));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,
                                                       texture_coordinates));
    vec3 specular = light.specular * spec * vec3(texture(material.specular,
                                                         texture_coordinates));
    return (ambient + diffuse + specular);
}


vec3 calc_point_light(PointLight light, vec3 normal, vec3 fragment_position,
                      vec3 view_direction)
{
    // Point source light with intensity attenuation by distance.
    vec3 light_direction = normalize(light.position - fragment_position);
    float diff = max(dot(normal, light_direction), 0.0);
    vec3 reflect_direction = reflect(-light_direction, normal);
    float spec = pow(max(dot(view_direction, reflect_direction), 0.0),
                     material.shininess);
    float distance = length(light.position - fragment_position);
    float attenuation = 1.0 / (light.constant + light.linear * distance + \
                               light.quadratic * distance * distance);
    vec3 ambient = light.ambient * vec3(texture(material.diffuse,
                                                texture_coordinates));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,
                                                       texture_coordinates));
    vec3 specular = light.specular * spec * vec3(texture(material.specular,
                                                         texture_coordinates));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}


vec3 calc_spotlight(SpotLight light, vec3 normal, vec3 fragment_position,
                     vec3 view_direction)
{
    float attenuation;
    vec3 light_direction = normalize(light.position - fragment_position);
    float theta = dot(light_direction, normalize(-light.direction));
    if (theta > light.theta_min){
        theta = theta-light.theta_min;
        attenuation = min(theta / (light.theta_taper_start - light.theta_min),
                          1.0);
    } else{
        attenuation = 0.0;
    }
    vec3 reflect_direction = reflect(-light_direction, normal);
    float spec = pow(max(dot(view_direction, reflect_direction), 0.0),
                     material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular,
                                                         texture_coordinates));
    vec3 ambient = light.ambient * vec3(texture(material.diffuse,
                                                texture_coordinates));
    float diff = max(dot(normal, light_direction), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,
                                                       texture_coordinates));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}


void main(){
    vec3 normalized_normal = normalize(normal);
    vec3 view_direction = normalize(camera_position - fragment_position);
    vec3 total;
    int i;

    total = calc_directional_light(directional_light, normalized_normal,
                                   view_direction);
    total += calc_spotlight(spotlight, normalized_normal,
                            fragment_position, view_direction);
    for (i=0; i<4; i++){
        total += calc_point_light(point_lights[i], normalized_normal,
                                  fragment_position, view_direction);
    }
	frag_color = texture(material.diffuse, texture_coordinates) * \
                 vec4(total, 1.0);
}
